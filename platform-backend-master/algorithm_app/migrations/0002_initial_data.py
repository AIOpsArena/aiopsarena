# Generated by Django 4.1.7 on 2024-05-26 09:09

import json

from django.db import migrations

def add_initial_data(apps, schema_editor):
    # 获取模型
    EvaluationIndicator = apps.get_model('algorithm_app', 'EvaluationIndicator')
    AlgorithmType = apps.get_model('algorithm_app', 'AlgorithmType')

    # 指标数据
    indicators_data = [
        {"name": "point_based_f1", "algorithm_type": "AnomalyDetection", "format_json": {"precision": "x", "recall": "x", "f1_score": "x"}},
        {"name": "range_based_f1", "algorithm_type": "AnomalyDetection", "format_json": {"precision": "x", "recall": "x", "f1_score": "x"}},
        {"name": "event_based_f1", "algorithm_type": "AnomalyDetection", "format_json": {"precision": "x", "recall": "x", "f1_score": "x"}},
        {"name": "accuracy_at_k", "algorithm_type": "RootCauseLocalization", "format_json": {"accuracy@1": "x", "accuracy@2": "x", "accuracy@3": "x", "accuracy@4": "x", "accuracy@5": "x"}},
        {"name": "average_accuracy_at_k", "algorithm_type": "RootCauseLocalization", "format_json": {"avg@1": "x", "avg@2": "x", "avg@3": "x", "avg@4": "x", "avg@5": "x"}},
        {"name": "mean_average_rank", "algorithm_type": "RootCauseLocalization", "format_json": {"mar": "x"}},
        {"name": "f1_micro", "algorithm_type": "FailureClassification", "format_json": {"precision": "x", "recall": "x", "f1_score": "x"}},
        {"name": "f1_macro", "algorithm_type": "FailureClassification", "format_json": {"precision": "x", "recall": "x", "f1_score": "x"}},
        {"name": "f1_weighted", "algorithm_type": "FailureClassification", "format_json": {"precision": "x", "recall": "x", "f1_score": "x"}}
    ]

    # 创建失败类型
    algorithms_type_data = [
        {"id": 1, "name": "AnomalyDetection"},
        {"id": 2, "name": "RootCauseLocalization"},
        {"id": 3, "name": "FailureClassification"}
    ]

    for algorithm_type in algorithms_type_data:
        AlgorithmType.objects.create(id=algorithm_type["id"], name=algorithm_type["name"])

    # 创建每个指标对象
    for indicator in indicators_data:
        # 获取对应的失败类型ID
        algorithm_type_id = AlgorithmType.objects.get(name=indicator["algorithm_type"]).id
        EvaluationIndicator.objects.create(
            indicator_name=indicator["name"],
            algorithm_type_id=algorithm_type_id,
            format_json=indicator["format_json"]
        )


class Migration(migrations.Migration):

    dependencies = [
        ('algorithm_app', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(add_initial_data),
    ]
